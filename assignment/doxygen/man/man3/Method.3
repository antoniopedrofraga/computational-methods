.TH "Method" 3 "Mon Nov 6 2017" "Heat conduction equation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Method \- A \fBMethod\fP class to structure information used to solve the problem\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <method\&.h>\fP
.PP
Inherited by \fBAnalytical\fP, \fBExplicit\fP, and \fBImplicit\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMethod\fP ()"
.br
.RI "\fIDefault constructor\&. \fP"
.ti -1c
.RI "\fBMethod\fP (\fBProblem\fP \fBproblem\fP)"
.br
.RI "\fIAlternate constructor\&. \fP"
.ti -1c
.RI "std::string \fBget_name\fP ()"
.br
.RI "\fINormal public get method\&. \fP"
.ti -1c
.RI "\fBMatrix\fP \fBget_solution\fP ()"
.br
.RI "\fINormal public get method\&. \fP"
.ti -1c
.RI "double \fBget_deltat\fP ()"
.br
.RI "\fINormal public get method\&. \fP"
.ti -1c
.RI "\fBVector\fP \fBget_xvalues\fP ()"
.br
.RI "\fINormal public get method\&. \fP"
.ti -1c
.RI "double \fBget_computational_time\fP ()"
.br
.RI "\fINormal public get method\&. \fP"
.ti -1c
.RI "void \fBcompute\fP ()"
.br
.RI "\fINormal public method\&. \fP"
.ti -1c
.RI "virtual void \fBcompute_solution\fP ()=0"
.br
.RI "\fIA pure virtual member\&. \fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBProblem\fP \fBproblem\fP"
.br
.RI "\fIProtected \fBProblem\fP problem\&. \fP"
.ti -1c
.RI "std::string \fBname\fP"
.br
.RI "\fIProtected string name\&. \fP"
.ti -1c
.RI "double \fBq\fP"
.br
.RI "\fIProtected double q\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "double \fBcomputational_time\fP"
.br
.RI "\fIPrivate double computational_time\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A \fBMethod\fP class to structure information used to solve the problem\&. 

The \fBMethod\fP class provides: 
.br
-basic constructors for creating a \fBMethod\fP object\&. 
.br
-acessor methods to retrieve valuable information 
.br
-mutator methods to change the problem grid system 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Method::Method ()"

.PP
Default constructor\&. Intialize a \fBMethod\fP object 
.PP
\fBSee also:\fP
.RS 4
\fBMethod(Problem problem)\fP 
.RE
.PP

.SS "Method::Method (\fBProblem\fP problem)"

.PP
Alternate constructor\&. Initializes a \fBMethod\fP with a given parabolic problem\&. 
.PP
\fBSee also:\fP
.RS 4
\fBMethod()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Method::compute ()"

.PP
Normal public method\&. Keeps track of the time to compute a solution 
.SS "virtual void Method::compute_solution ()\fC [pure virtual]\fP"

.PP
A pure virtual member\&. compute the solution following the rules of a given method\&. 
.PP
Implemented in \fBImplicit\fP, \fBExplicit\fP, and \fBAnalytical\fP\&.
.SS "double Method::get_computational_time ()"

.PP
Normal public get method\&. get the elapsed time value to compute a solution 
.PP
\fBReturns:\fP
.RS 4
double\&. Elapsed time throughout the computation\&. 
.RE
.PP

.SS "double Method::get_deltat ()"

.PP
Normal public get method\&. get the time step of the solution 
.PP
\fBReturns:\fP
.RS 4
double\&. Solution time step\&. 
.RE
.PP

.SS "std::string Method::get_name ()"

.PP
Normal public get method\&. get the method name 
.PP
\fBReturns:\fP
.RS 4
string\&. \fBMethod\fP name\&. 
.RE
.PP

.SS "\fBMatrix\fP Method::get_solution ()"

.PP
Normal public get method\&. get the solution grid 
.PP
\fBReturns:\fP
.RS 4
\fBMatrix\fP\&. Computed solution grid\&. 
.RE
.PP

.SS "\fBVector\fP Method::get_xvalues ()"

.PP
Normal public get method\&. get x values vector 
.PP
\fBReturns:\fP
.RS 4
\fBVector\fP\&. x values \fBVector\fP\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "double Method::computational_time\fC [private]\fP"

.PP
Private double computational_time\&. Elapsed time throughout the solution computation\&. 
.SS "std::string Method::name\fC [protected]\fP"

.PP
Protected string name\&. Name of the method\&. 
.SS "\fBProblem\fP Method::problem\fC [protected]\fP"

.PP
Protected \fBProblem\fP problem\&. Space step of the solution\&. 
.SS "double Method::q\fC [protected]\fP"

.PP
Protected double q\&. A coeficient which value depends of way the equation is written, it may vary from method to method\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Heat conduction equation from the source code\&.
