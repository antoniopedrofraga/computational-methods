.TH "Matrix" 3 "Mon Nov 6 2017" "Heat conduction equation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Matrix \- A matrix class for data storage of a 2D array of doubles 
.br
 The implementation is derived from the standard container vector std::vector 
.br
 We use private inheritance to base our vector upon the library version whilst  usto expose only those base class functions we wish to use - in this  the array access operator []\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <matrix\&.h>\fP
.PP
Inherits vector< std::vector< double > >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMatrix\fP ()"
.br
.RI "\fIDefault constructor\&. \fP"
.ti -1c
.RI "\fBMatrix\fP (int Nrows, int Ncols)"
.br
.RI "\fIAlternate constructor\&. \fP"
.ti -1c
.RI "\fBMatrix\fP (const \fBMatrix\fP &m)"
.br
.RI "\fICopy constructor\&. \fP"
.ti -1c
.RI "int \fBgetNrows\fP () const "
.br
.RI "\fINormal public get method\&. \fP"
.ti -1c
.RI "int \fBgetNcols\fP () const "
.br
.RI "\fINormal public get method\&. \fP"
.ti -1c
.RI "void \fBset_row\fP (int index, \fBVector\fP v)"
.br
.RI "\fINormal public set method\&. \fP"
.ti -1c
.RI "\fBMatrix\fP & \fBoperator=\fP (const \fBMatrix\fP &m)"
.br
.RI "\fIOverloaded assignment operator\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBMatrix\fP &m) const "
.br
.RI "\fIOverloaded comparison operator returns true or false depending on whether the matrices are the same or not\&. \fP"
.ti -1c
.RI "double \fBone_norm\fP () const "
.br
.RI "\fINormal public method that returns a double\&. \fP"
.ti -1c
.RI "double \fBtwo_norm\fP () const "
.br
.RI "\fINormal public method that returns a double\&. \fP"
.ti -1c
.RI "double \fBuniform_norm\fP () const "
.br
.RI "\fINormal public method that returns a double\&. \fP"
.ti -1c
.RI "\fBMatrix\fP \fBoperator*\fP (const \fBMatrix\fP &a) const "
.br
.RI "\fIOverloaded *operator that returns a \fBMatrix\fP\&. \fP"
.ti -1c
.RI "\fBVector\fP \fBoperator*\fP (const \fBVector\fP &v) const "
.br
.RI "\fIOverloaded *operator that returns a \fBVector\fP\&. \fP"
.ti -1c
.RI "\fBMatrix\fP \fBtranspose\fP () const "
.br
.RI "\fIpublic method that returns the transpose of the matrix\&. \fP"
.ti -1c
.RI "\fBMatrix\fP \fBmult\fP (const \fBMatrix\fP &a) const "
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "typedef std::vector< std::vector< double > > \fBvec\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "std::istream & \fBoperator>>\fP (std::istream &is, \fBMatrix\fP &m)"
.br
.RI "\fIOverloaded istream >> operator\&. \fP"
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, const \fBMatrix\fP &m)"
.br
.RI "\fIOverloaded ostream << operator\&. \fP"
.ti -1c
.RI "std::ifstream & \fBoperator>>\fP (std::ifstream &ifs, \fBMatrix\fP &m)"
.br
.RI "\fIOverloaded ifstream >> operator\&. \fP"
.ti -1c
.RI "std::ofstream & \fBoperator<<\fP (std::ofstream &ofs, const \fBMatrix\fP &m)"
.br
.RI "\fIOverloaded ofstream << operator\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A matrix class for data storage of a 2D array of doubles 
.br
 The implementation is derived from the standard container vector std::vector 
.br
 We use private inheritance to base our vector upon the library version whilst  usto expose only those base class functions we wish to use - in this  the array access operator []\&. 

The \fBMatrix\fP class provides: 
.br
-basic constructors for creating a matrix object from other matrix object,  by creating empty matrix of a given size, 
.br
-input and oput operation via >> and << operators using keyboard or file 
.br
-basic operations like access via [] operator, assignment and comparision 
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::vector<std::vector<double> > \fBMatrix::vec\fP\fC [private]\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "Matrix::Matrix ()"

.PP
Default constructor\&. Intialize an empty \fBMatrix\fP object 
.PP
\fBSee also:\fP
.RS 4
\fBMatrix(int Nrows, int Ncols)\fP 
.PP
\fBMatrix(const Matrix& m)\fP 
.RE
.PP

.SS "Matrix::Matrix (int Nrows, int Ncols)"

.PP
Alternate constructor\&. build a matrix Nrows by Ncols 
.PP
\fBSee also:\fP
.RS 4
\fBMatrix()\fP 
.PP
\fBMatrix(const Matrix& m)\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIinvalid_argument\fP ('matrix size negative or zero') 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fINrows\fP int\&. number of rows in matrix 
.br
\fINcols\fP int\&. number of columns in matrix 
.RE
.PP

.SS "Matrix::Matrix (const \fBMatrix\fP & m)"

.PP
Copy constructor\&. build a matrix from another matrix 
.PP
\fBSee also:\fP
.RS 4
\fBMatrix()\fP 
.PP
\fBMatrix(int Nrows, int Ncols)\fP 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIm\fP \fBMatrix\fP&\&. matrix to copy from 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "int Matrix::getNcols () const"

.PP
Normal public get method\&. get the number of columns 
.PP
\fBSee also:\fP
.RS 4
int \fBgetNrows()const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
int\&. number of columns in matrix 
.RE
.PP

.SS "int Matrix::getNrows () const"

.PP
Normal public get method\&. get the number of rows 
.PP
\fBSee also:\fP
.RS 4
int \fBgetNcols()const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
int\&. number of rows in matrix 
.RE
.PP

.SS "\fBMatrix\fP Matrix::mult (const \fBMatrix\fP & a) const"

.SS "double Matrix::one_norm () const"

.PP
Normal public method that returns a double\&. It returns L1 norm of matrix 
.PP
\fBSee also:\fP
.RS 4
\fBtwo_norm()const\fP 
.PP
\fBuniform_norm()const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
double\&. matrix L1 norm 
.RE
.PP

.SS "\fBMatrix\fP Matrix::operator* (const \fBMatrix\fP & a) const"

.PP
Overloaded *operator that returns a \fBMatrix\fP\&. It Performs matrix by matrix multiplication\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator*(const Matrix & a) const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIout_of_range\fP ('Matrix access error') One or more of the matrix have a zero size 
.br
\fIstd::out_of_range\fP ('uncompatible matrix sizes') Number of columns in first matrix do not match number of columns in second matrix 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBMatrix\fP\&. matrix-matrix product 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIa\fP \fBMatrix\fP\&. matrix to multiply by 
.RE
.PP

.SS "\fBVector\fP Matrix::operator* (const \fBVector\fP & v) const"

.PP
Overloaded *operator that returns a \fBVector\fP\&. It Performs matrix by vector multiplication\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator*(const Matrix & a)const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::out_of_range\fP ('Matrix access error') matrix has a zero size 
.br
\fIstd::out_of_range\fP ('Vector access error') vector has a zero size 
.br
\fIstd::out_of_range\fP ('uncompatible matrix-vector sizes') Number of columns in matrix do not match the vector size 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBVector\fP\&. matrix-vector product 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIv\fP \fBVector\fP\&. \fBVector\fP to multiply by 
.RE
.PP

.SS "\fBMatrix\fP & Matrix::operator= (const \fBMatrix\fP & m)"

.PP
Overloaded assignment operator\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator==(const Matrix& m)const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBMatrix\fP&\&. the matrix on the left of the assignment 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIm\fP \fBMatrix\fP&\&. \fBMatrix\fP to assign from 
.RE
.PP

.SS "bool Matrix::operator== (const \fBMatrix\fP & m) const"

.PP
Overloaded comparison operator returns true or false depending on whether the matrices are the same or not\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator=(const Matrix& m)\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
bool\&. true or false 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIm\fP \fBMatrix\fP&\&. \fBMatrix\fP to compare to 
.RE
.PP

.SS "void Matrix::set_row (int index, \fBVector\fP v)"

.PP
Normal public set method\&. replace a row with a given vector 
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Index of row to mutate 
.br
\fIv\fP New vector 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIout_of_range\fP ('index out of range\&.\\n') 
.br
\fIout_of_range\fP ('vector size is different from matrix columns number\&.\\n') 
.RE
.PP

.SS "\fBMatrix\fP Matrix::transpose () const"

.PP
public method that returns the transpose of the matrix\&. It returns the transpose of matrix 
.PP
\fBReturns:\fP
.RS 4
\fBMatrix\fP\&. matrix transpose 
.RE
.PP

.SS "double Matrix::two_norm () const"

.PP
Normal public method that returns a double\&. It returns L2 norm of matrix 
.PP
\fBSee also:\fP
.RS 4
\fBone_norm()const\fP 
.PP
\fBuniform_norm()const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
double\&. matrix L2 norm 
.RE
.PP

.SS "double Matrix::uniform_norm () const"

.PP
Normal public method that returns a double\&. It returns L_max norm of matrix 
.PP
\fBSee also:\fP
.RS 4
\fBone_norm()const\fP 
.PP
\fBtwo_norm()const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
double\&. matrix L_max norm 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "std::ostream& operator<< (std::ostream & os, const \fBMatrix\fP & m)\fC [friend]\fP"

.PP
Overloaded ostream << operator\&. Display output if matrix has size user will be asked to input only matrix values if matrix was not initialized user can choose matrix size and input it values 
.PP
\fBSee also:\fP
.RS 4
\fBoperator>>(std::ifstream& ifs, Matrix& m)\fP 
.PP
\fBoperator>>(std::istream& is, Matrix& m)\fP 
.PP
\fBoperator<<(std::ostream& os, const Matrix& m)\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
std::ostream&\&. The ostream object 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIos\fP Display output stream 
.br
\fIm\fP \fBMatrix\fP to read from 
.RE
.PP

.SS "std::ofstream& operator<< (std::ofstream & ofs, const \fBMatrix\fP & m)\fC [friend]\fP"

.PP
Overloaded ofstream << operator\&. File output the file output operator is compatible with file input operator, ie\&. everything written can be read later\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator>>(std::ifstream& ifs, Matrix& m)\fP 
.PP
\fBoperator<<(std::ofstream& ofs, const Matrix& m)\fP 
.PP
\fBoperator>>(std::istream& is, Matrix& m)\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP ('file read error - negative matrix size'); 
.RE
.PP
\fBReturns:\fP
.RS 4
std::ofstream&\&. The ofstream object 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIm\fP \fBMatrix\fP to read from 
.RE
.PP

.SS "std::istream& operator>> (std::istream & is, \fBMatrix\fP & m)\fC [friend]\fP"

.PP
Overloaded istream >> operator\&. Keyboard input if matrix has size user will be asked to input only matrix values if matrix was not initialized user can choose matrix size and input it values 
.PP
\fBSee also:\fP
.RS 4
\fBoperator<<(std::ofstream& ofs, const Matrix& m)\fP 
.PP
\fBoperator>>(std::istream& is, Matrix& m)\fP 
.PP
\fBoperator<<(std::ostream& os, const Matrix& m)\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP ('read error - negative matrix size'); 
.RE
.PP
\fBReturns:\fP
.RS 4
std::istream&\&. The istream object 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIis\fP Keyboard input stream 
.br
\fIm\fP \fBMatrix\fP to write into 
.RE
.PP

.SS "std::ifstream& operator>> (std::ifstream & ifs, \fBMatrix\fP & m)\fC [friend]\fP"

.PP
Overloaded ifstream >> operator\&. File input the file output operator is compatible with file input operator, ie\&. everything written can be read later\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator>>(std::ifstream& ifs, Matrix& m)\fP 
.PP
\fBoperator<<(std::ofstream& ofs, const Matrix& m)\fP 
.PP
\fBoperator<<(std::ostream& os, const Matrix& m)\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
std::ifstream&\&. The ifstream object 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIifs\fP Input file stream with opened matrix file 
.br
\fIm\fP \fBMatrix\fP to write into 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Heat conduction equation from the source code\&.
