.TH "Vector" 3 "Mon Nov 6 2017" "Heat conduction equation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Vector \- A vector class for data storage of a 1D array of doubles 
.br
 The implementation is derived from the standard container vector std::vector 
.br
 We use private inheritance to base our vector upon the library version whilst  usto expose only those base class functions we wish to use - in this  the array access operator []\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <vector\&.h>\fP
.PP
Inherits vector< double >\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVector\fP ()"
.br
.RI "\fIDefault constructor\&. \fP"
.ti -1c
.RI "\fBVector\fP (int Num)"
.br
.RI "\fI\fBExplicit\fP alterative constructor takes an intiger\&. \fP"
.ti -1c
.RI "\fBVector\fP (const \fBVector\fP &v)"
.br
.RI "\fICopy constructor takes an \fBVector\fP object reference\&. \fP"
.ti -1c
.RI "\fBVector\fP (std::vector< double > \fBvec\fP)"
.br
.RI "\fICopy constructor takes an vector<double> object reference\&. \fP"
.ti -1c
.RI "\fBVector\fP & \fBoperator=\fP (const \fBVector\fP &v)"
.br
.RI "\fIOverloaded assignment operator\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBVector\fP &v) const "
.br
.RI "\fIOverloaded comparison operator returns true if vectors are the same within a tolerance (1\&.e-07) \fP"
.ti -1c
.RI "int \fBgetSize\fP () const "
.br
.RI "\fINormal get method that returns integer, the size of the vector\&. \fP"
.ti -1c
.RI "int \fBfind\fP (double value)"
.br
.RI "\fI\fBMethod\fP to find the value index in a vector\&. \fP"
.ti -1c
.RI "void \fBpush_front_back\fP (double value)"
.br
.RI "\fI\fBMethod\fP to push a value to the first and last position of a \fBVector\fP\&. \fP"
.ti -1c
.RI "void \fBpush\fP (double value)"
.br
.RI "\fI\fBMethod\fP to push a value to the last position of a \fBVector\fP\&. \fP"
.ti -1c
.RI "double \fBone_norm\fP () const "
.br
.RI "\fINormal public method that returns a double\&. \fP"
.ti -1c
.RI "double \fBtwo_norm\fP () const "
.br
.RI "\fINormal public method that returns a double\&. \fP"
.ti -1c
.RI "double \fBuniform_norm\fP () const "
.br
.RI "\fINormal public method that returns a double\&. \fP"
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "typedef std::vector< double > \fBvec\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "std::istream & \fBoperator>>\fP (std::istream &is, \fBVector\fP &v)"
.br
.RI "\fIOverloaded istream >> operator\&. \fP"
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, const \fBVector\fP &v)"
.br
.RI "\fIOverloaded ifstream << operator\&. \fP"
.ti -1c
.RI "std::ifstream & \fBoperator>>\fP (std::ifstream &ifs, \fBVector\fP &v)"
.br
.RI "\fIOverloaded ifstream >> operator\&. \fP"
.ti -1c
.RI "std::ofstream & \fBoperator<<\fP (std::ofstream &ofs, const \fBVector\fP &v)"
.br
.RI "\fIOverloaded ofstream << operator\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A vector class for data storage of a 1D array of doubles 
.br
 The implementation is derived from the standard container vector std::vector 
.br
 We use private inheritance to base our vector upon the library version whilst  usto expose only those base class functions we wish to use - in this  the array access operator []\&. 

The \fBVector\fP class provides: 
.br
-basic constructors for creating vector obcjet from other vector object, or by creating empty vector of a given size, 
.br
-input and oput operation via >> and << operators using keyboard or file 
.br
-basic operations like access via [] operator, assignment and comparision 
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::vector<double> \fBVector::vec\fP\fC [private]\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "Vector::Vector ()"

.PP
Default constructor\&. Intialize an empty \fBVector\fP object 
.PP
\fBSee also:\fP
.RS 4
\fBVector(int Num)\fP 
.PP
\fBVector(const Vector& v)\fP 
.RE
.PP

.SS "Vector::Vector (int Num)\fC [explicit]\fP"

.PP
\fBExplicit\fP alterative constructor takes an intiger\&. it is explicit since implicit type conversion int -> vector doesn't make sense Intialize \fBVector\fP object of size Num 
.PP
\fBSee also:\fP
.RS 4
\fBVector()\fP 
.PP
\fBVector(const Vector& v)\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIinvalid_argument\fP ('vector size negative') 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fINum\fP int\&. Size of a vector 
.RE
.PP

.SS "Vector::Vector (const \fBVector\fP & v)"

.PP
Copy constructor takes an \fBVector\fP object reference\&. Intialize \fBVector\fP object with another \fBVector\fP object 
.PP
\fBSee also:\fP
.RS 4
\fBVector()\fP 
.PP
\fBVector(int Num)\fP 
.RE
.PP

.SS "Vector::Vector (std::vector< double > vec)"

.PP
Copy constructor takes an vector<double> object reference\&. Intialize \fBVector\fP object with an vector<double> object 
.PP
\fBSee also:\fP
.RS 4
\fBVector()\fP 
.PP
\fBVector(int Num)\fP 
.PP
\fBVector(const Vector& v)\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "int Vector::find (double value)"

.PP
\fBMethod\fP to find the value index in a vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value to find 
.RE
.PP
\fBReturns:\fP
.RS 4
int\&. -1 if value was not found or the value index otherwise 
.RE
.PP

.SS "int Vector::getSize () const"

.PP
Normal get method that returns integer, the size of the vector\&. 
.PP
\fBReturns:\fP
.RS 4
int\&. the size of the vector 
.RE
.PP

.SS "double Vector::one_norm () const"

.PP
Normal public method that returns a double\&. It returns L1 norm of vector 
.PP
\fBSee also:\fP
.RS 4
\fBtwo_norm()const\fP 
.PP
\fBuniform_norm()const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
double\&. vectors L1 norm 
.RE
.PP

.SS "\fBVector\fP & Vector::operator= (const \fBVector\fP & v)"

.PP
Overloaded assignment operator\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator==(const Vector& v)const\fP 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIv\fP \fBVector\fP to assign from 
.RE
.PP
\fBReturns:\fP
.RS 4
the object on the left of the assignment 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIv\fP Vecto&\&. \fBVector\fP to assign from 
.RE
.PP

.SS "bool Vector::operator== (const \fBVector\fP & v) const"

.PP
Overloaded comparison operator returns true if vectors are the same within a tolerance (1\&.e-07) 
.PP
\fBSee also:\fP
.RS 4
\fBoperator=(const Vector& v)\fP 
.PP
operator[](int i) 
.PP
operator[](int i)const 
.RE
.PP
\fBReturns:\fP
.RS 4
bool\&. true or false 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIinvalid_argument\fP ('incompatible vector sizes\\n') 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIv\fP \fBVector\fP&\&. vector to compare 
.RE
.PP

.SS "void Vector::push (double value)"

.PP
\fBMethod\fP to push a value to the last position of a \fBVector\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value to be pushed 
.RE
.PP

.SS "void Vector::push_front_back (double value)"

.PP
\fBMethod\fP to push a value to the first and last position of a \fBVector\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value to insert 
.RE
.PP

.SS "double Vector::two_norm () const"

.PP
Normal public method that returns a double\&. It returns L2 norm of vector 
.PP
\fBSee also:\fP
.RS 4
\fBone_norm()const\fP 
.PP
\fBuniform_norm()const\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
double\&. vectors L2 norm 
.RE
.PP

.SS "double Vector::uniform_norm () const"

.PP
Normal public method that returns a double\&. It returns L_max norm of vector 
.PP
\fBSee also:\fP
.RS 4
\fBone_norm()const\fP 
.PP
\fBtwo_norm()const\fP 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIout_of_range\fP ('vector access error') vector has zero size 
.RE
.PP
\fBReturns:\fP
.RS 4
double\&. vectors Lmax norm 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "std::ostream& operator<< (std::ostream & os, const \fBVector\fP & v)\fC [friend]\fP"

.PP
Overloaded ifstream << operator\&. Display output\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator>>(std::istream& is, Vector& v)\fP 
.PP
\fBoperator>>(std::ifstream& ifs, Vector& v)\fP 
.PP
\fBoperator<<(std::ofstream& ofs, const Vector& v)\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
std::ostream&\&. the output stream object os 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIos\fP output file stream 
.br
\fIv\fP vector to read from 
.RE
.PP

.SS "std::ofstream& operator<< (std::ofstream & ofs, const \fBVector\fP & v)\fC [friend]\fP"

.PP
Overloaded ofstream << operator\&. File output\&. the file output operator is compatible with file input operator, ie\&. everything written can be read later\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator>>(std::istream& is, Vector& v)\fP 
.PP
\fBoperator>>(std::ifstream& ifs, Vector& v)\fP 
.PP
\fBoperator<<(std::ostream& os, const Vector& v)\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
std::ofstream&\&. the output ofstream object ofs 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIofs\fP outputfile stream\&. With opened file 
.br
\fIv\fP \fBVector\fP&\&. vector to read from 
.RE
.PP

.SS "std::istream& operator>> (std::istream & is, \fBVector\fP & v)\fC [friend]\fP"

.PP
Overloaded istream >> operator\&. Keyboard input if vector has size user will be asked to input only vector values if vector was not initialized user can choose vector size and input it values 
.PP
\fBSee also:\fP
.RS 4
\fBoperator>>(std::ifstream& ifs, Vector& v)\fP 
.PP
\fBoperator<<(std::ostream& os, const Vector& v)\fP 
.PP
\fBoperator<<(std::ofstream& ofs, const Vector& v)\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
std::istream&\&. the input stream object is 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP ('read error - negative vector size'); 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIis\fP keyboard input straem\&. For user input 
.br
\fIv\fP \fBVector\fP&\&. vector to write to 
.RE
.PP

.SS "std::ifstream& operator>> (std::ifstream & ifs, \fBVector\fP & v)\fC [friend]\fP"

.PP
Overloaded ifstream >> operator\&. File input the file output operator is compatible with file input operator, ie\&. everything written can be read later\&. 
.PP
\fBSee also:\fP
.RS 4
\fBoperator>>(std::istream& is, Vector& v)\fP 
.PP
\fBoperator<<(std::ostream& os, const Vector& v)\fP 
.PP
\fBoperator<<(std::ofstream& ofs, const Vector& v)\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
ifstream&\&. the input ifstream object ifs 
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIstd::invalid_argument\fP ('file read error - negative vector size'); 
.RE
.PP

.PP
\fBParameters:\fP
.RS 4
\fIifs\fP input file straem\&. With opened matrix file 
.br
\fIv\fP \fBVector\fP&\&. vector to write to 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Heat conduction equation from the source code\&.
